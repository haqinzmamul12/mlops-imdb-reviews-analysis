services:
  postgres:
    image: postgres:13 
    environment:
      POSTGRES_USER: airflow 
      POSTGRES_PASSWORD: airflow 
      POSTGRES_DB: airflow

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 5s
      retries: 5

  airflow-init:
    image: apache/airflow:2.9.0
    container_name: airflow-init
    depends_on:
      postgres:
        condition: service_healthy
    
    environment:
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    command: bash -c "airflow db init"

  airflow:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow
    depends_on:
      postgres:
        condition: service_healthy

    environment:
      - PYTHONPATH=/opt/airflow
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/airflow_orchestrator/dags
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=false
    command: 
      bash -c "
      mkdir -p /opt/airflow/logs/scheduler &&
      chmod -R 777 /opt/airflow/logs && 
      airflow db upgrade && 
      airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com && 
      airflow webserver & airflow scheduler
      "
    ports:
      - "8080:8080"
    volumes:
      - .:/opt/airflow
    user: "0:0"

  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.12.1
    container_name: mlflow
    ports:
      - "5000:5000"
    command: mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri sqlite:///mlflow.db --default-artifact-root /mlflow/artifacts
    volumes:
      - ./mlruns:/mlflow/artifacts



  ngrok-airflow:
    image: ngrok/ngrok:3
    container_name: ngrok-airflow
    command: http airflow:8080 --log=stdout --log-format=json
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    depends_on:
      - airflow

  # ngrok-mlflow:
  #   image: ngrok/ngrok:3
  #   container_name: ngrok-mlflow
  #   command: http mlflow:5000 --log=stdout --log-format=json
  #   environment:
  #     - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
  #   depends_on:
  #     - mlflow
